import telebot
from telebot import types
import threading

from utils.config import BOT_TOKEN
import utils.database as db
import utils.keyboards as kb
from utils.parser import run_parser
import utils.llm_service

# –ü–æ—Å–∫–æ–ª—å–∫—É –≤—ã –∏–∑—É—á–∞–µ—Ç–µ DevOps, –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç:
# `telebot` ‚Äî –±–ª–æ–∫–∏—Ä—É—é—â–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–Ω–∞ –¥–æ–ª–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
# (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—Ä—Å–∏–Ω–≥), –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –¥—Ä—É–≥–∏–º.
# –ß—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ —ç—Ç–æ, –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ª–≥–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö (threads).
# –í "–±–æ–µ–≤–æ–º" –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π, –∫–∞–∫ –≤—ã –∏ –ø–∏—Å–∞–ª–∏ –≤ –ø–ª–∞–Ω–µ (Celery + Redis),
# –Ω–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–æ—Ç–æ–∫–∏ ‚Äî –æ—Ç–ª–∏—á–Ω–æ–µ –∏ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="MARKDOWN")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í –ø—Ä–æ–¥–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis.
user_states = {}

# --- –ü–æ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞ ---
def analysis_thread_target(chat_id, channel_url):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    try:
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        bot.send_message(chat_id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")
        
        # 2. –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç—ã
        posts_text = run_parser(channel_url)
        if posts_text.startswith("–û—à–∏–±–∫–∞"):
            bot.send_message(chat_id, posts_text)
            return

        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –ò–ò
        bot.send_message(chat_id, "üßê –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ—Å—Ç—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É...")
        style_summary = llm_service.analyze_style(posts_text)
        if not style_summary:
            bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
        db.save_channel_style(chat_id, channel_url, style_summary)
        
        # 5. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–µ–º–µ –ø–æ—Å—Ç–∞
        msg = bot.send_message(chat_id, 
            "‚úÖ –°—Ç–∏–ª—å –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!\n\n"
            "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: '–û–±–∑–æ—Ä –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Python'.\n\n"
            "–ò–ª–∏, –µ—Å–ª–∏ –∏–¥–µ–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç –∏–¥–µ–π', –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç—ã."
        )
        
        # 6. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.register_next_step_handler(msg, handle_topic_input)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    db.add_user_if_not_exists(message.chat.id, message.from_user.username)
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ –±–∞–∑–µ –ò–ò.\n"
        "–Ø –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –ø—É–±–ª–∏—á–Ω—ã–π Telegram-–∫–∞–Ω–∞–ª, "
        "–ø–æ–Ω—è—Ç—å –µ–≥–æ —Å—Ç–∏–ª—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —Ç–∞–∫–æ–π –∂–µ –º–∞–Ω–µ—Ä–µ.\n\n"
        "‚û°Ô∏è **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ `@channel_name`**"
    )
    bot.reply_to(message, welcome_text)

@bot.message_handler(func=lambda message: message.text and message.text.startswith('@'))
def handle_channel_link(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª."""
    channel_url = message.text.strip()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
    thread = threading.Thread(target=analysis_thread_target, args=(message.chat.id, channel_url))
    thread.start()

def handle_topic_input(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = message.chat.id
    topic = message.text.strip()

    style_summary = db.get_channel_style_by_user(chat_id)
    if not style_summary:
        bot.send_message(chat_id, "–ù–µ –Ω–∞—à–µ–ª –≤–∞—à –∞–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å–Ω–æ–≤–∞.")
        return

    bot.send_message(chat_id, f"ü§ñ –ü—Ä–∏–Ω—è–ª! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Ç–µ–º–µ: '{topic}'. –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
    
    if topic.lower() in ['–Ω–µ—Ç –∏–¥–µ–π', '–Ω–µ—Ç', '–Ω–µ –∑–Ω–∞—é']:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏
        ideas_text = llm_service.generate_post_ideas(style_summary)
        bot.send_message(chat_id, f"–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç–∏–ª–µ –∫–∞–Ω–∞–ª–∞:\n\n{ideas_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –º–Ω–µ.")
        bot.register_next_step_handler(message, handle_topic_input) # –ñ–¥–µ–º –≤—ã–±–æ—Ä–∞ –∏–¥–µ–∏
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
    variations = llm_service.create_post_variations(style_summary, topic)
    if not variations:
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–º–∞ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.")
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[chat_id] = {'variants': variations}

    response_text = "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–∏–π:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = [types.InlineKeyboardButton(text=f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}", callback_data=f"select_variant_{i}") for i in range(len(variations))]
    keyboard.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    for i, variant in enumerate(variations):
        bot.send_message(chat_id, f"*--- –í–∞—Ä–∏–∞–Ω—Ç {i+1} ---*\n{variant}")

    bot.send_message(chat_id, "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('select_variant_'))
def handle_variant_selection(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ—Å—Ç–∞."""
    chat_id = call.message.chat.id
    variant_index = int(call.data.split('_')[-1])

    if chat_id not in user_states or 'variants' not in user_states[chat_id]:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    selected_post = user_states[chat_id]['variants'][variant_index]
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del user_states[chat_id]

    bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –≤–∞—à –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç. –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.", chat_id, call.message.message_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç
    bot.send_message(chat_id, selected_post)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription_offer = (
        "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? ‚ú®\n\n"
        "–° –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n"
        "- **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ—Å—Ç–∏–Ω–≥**: –Ø –±—É–¥—É —Å–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ—Å—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n"
        "- **–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω**: –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥!\n"
    )
    bot.send_message(chat_id, subscription_offer, reply_markup=kb.offer_subscription_keyboard())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'buy_subscription')
def handle_buy_subscription(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏."""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π (Stripe, –ÆKassa –∏ —Ç.–¥.)
    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.
    # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    # 3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä,
    #    –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    bot.answer_callback_query(call.id, "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ...")
    bot.send_message(call.message.chat.id, "–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã. "
                                          "–°–µ–π—á–∞—Å —è –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É—é –≤–∞–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞.")
    # db.activate_subscription(call.message.chat.id, 'daily') # –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    bot.infinity_polling()