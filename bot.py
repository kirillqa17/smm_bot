"""
SMM Bot - Main bot file
Intuitive multi-tool for SMM specialists
"""
import telebot
from telebot import types
import time
import base64
from io import BytesIO

from core.config import BOT_TOKEN, validate_config
from core.state_manager import state_manager
from db.database import db
from tasks.celery_app import celery_app
from tasks.tasks import (
    analyze_channel_task,
    generate_posts_task,
    fetch_news_task,
    generate_post_from_news_task,
    generate_image_task,
    edit_image_task,
    remove_watermark_task,
    add_watermark_task
)

# Validate config
validate_config()

# Initialize bot
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# Constants
STATES = {
    "WAITING_CHANNEL": "waiting_channel",
    "WAITING_TOPIC": "waiting_topic",
    "WAITING_NEWS_KEYWORDS": "waiting_news_keywords",
    "WAITING_IMAGE_PROMPT": "waiting_image_prompt",
    "WAITING_EDIT_INSTRUCTION": "waiting_edit_instruction",
    "WAITING_WATERMARK_TEXT": "waiting_watermark_text",
    "WAITING_IMAGE_FOR_EDIT": "waiting_image_for_edit",
    "WAITING_IMAGE_FOR_WM": "waiting_image_for_wm",
}


# ===== KEYBOARDS =====

def main_menu_keyboard():
    """Main menu keyboard"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞"),
        types.KeyboardButton("‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"),
        types.KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –≤ –ø–æ—Å—Ç"),
        types.KeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"),
        types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ"),
        types.KeyboardButton("üíß –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫"),
        types.KeyboardButton("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    )
    return keyboard


def cancel_keyboard():
    """Cancel keyboard"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return keyboard


def news_category_keyboard():
    """News categories inline keyboard"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üñ• –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data="news_tech"),
        types.InlineKeyboardButton("üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="news_crypto"),
        types.InlineKeyboardButton("üì± –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", callback_data="news_marketing"),
        types.InlineKeyboardButton("üíº –ë–∏–∑–Ω–µ—Å", callback_data="news_business"),
        types.InlineKeyboardButton("üîç –°–≤–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="news_custom")
    )
    return keyboard


def image_provider_keyboard():
    """Image generation provider keyboard"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üé® DALL-E 3", callback_data="img_dalle"),
        types.InlineKeyboardButton("‚ö° Stable Diffusion", callback_data="img_sd")
    )
    return keyboard


# ===== START & HELP =====

@bot.message_handler(commands=['start'])
def start_handler(message):
    """Start command handler"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    # Clear any existing state
    state_manager.clear_state(user_id)
    state_manager.clear_user_data(user_id)

    # Add user to database
    db.add_user(user_id, username, first_name)

    # Show main menu
    show_main_menu(message)


def show_main_menu(message):
    """Show main menu"""
    welcome_text = """üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SMM Bot!</b>

–Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å Telegram –∫–∞–Ω–∞–ª–æ–≤
‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ –ª—é–±–æ–º —Å—Ç–∏–ª–µ
üì∞ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (DALL-E 3)
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å AI
üíß –î–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å –≤–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""

    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=main_menu_keyboard()
    )


@bot.message_handler(commands=['help'])
def help_handler(message):
    """Help command handler"""
    help_text = """<b>üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ SMM Bot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>

üìä <b>–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞</b>
–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è, —Ç–æ–Ω–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª—é–±–æ–≥–æ Telegram –∫–∞–Ω–∞–ª–∞.
–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ (@–∫–∞–Ω–∞–ª).

‚úçÔ∏è <b>–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</b>
–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ —Å—Ç–∏–ª–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.
–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç—ã –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É.

üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ –≤ –ø–æ—Å—Ç</b>
–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤.
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: Tech, Crypto, Marketing, Business

üé® <b>–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É</b>
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI (DALL-E 3).
–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å.

‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ</b>
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI:
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤/—Ñ–æ–Ω–∞
- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
- –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤

üíß <b>–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫</b>
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞-–≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

üìà <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

<b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ - –Ω–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å!
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ª—é–±—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ ‚ùå –û—Ç–º–µ–Ω–∞
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è Telegram

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ!"""

    bot.send_message(message.chat.id, help_text)


# ===== MENU BUTTON HANDLERS =====

@bot.message_handler(func=lambda m: m.text in ["üìä Analyze Channel", "üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞"])
def analyze_channel_button(message):
    """Analyze channel button handler"""
    user_id = message.from_user.id

    state_manager.set_state(user_id, STATES["WAITING_CHANNEL"])

    bot.send_message(
        message.chat.id,
        "üìä <b>–ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ username –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>@–∏–º—è_–∫–∞–Ω–∞–ª–∞</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: @durov",
        reply_markup=cancel_keyboard()
    )


@bot.message_handler(func=lambda m: m.text in ["‚úçÔ∏è Generate Post", "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"])
def generate_post_button(message):
    """Generate post button handler"""
    user_id = message.from_user.id

    # Get all user's channels
    channels = db.get_user_channels(user_id)

    if not channels:
        bot.send_message(
            message.chat.id,
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return

    # If only one channel - use it directly
    if len(channels) == 1:
        channel_id = channels[0]['id']
        channel_title = channels[0]['channel_title'] or channels[0]['channel_url']

        state_manager.set_data(user_id, "selected_channel_id", channel_id)
        state_manager.set_state(user_id, STATES["WAITING_TOPIC"])

        bot.send_message(
            message.chat.id,
            f"‚úçÔ∏è <b>–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</b>\n\n"
            f"üì∫ –ö–∞–Ω–∞–ª: <b>{channel_title}</b>\n\n"
            f"–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å?\n\n"
            f"–ü—Ä–∏–º–µ—Ä: <i>\"–ù–æ–≤—ã–µ AI —Ç—Ä–µ–Ω–¥—ã –≤ 2025\"</i>",
            reply_markup=cancel_keyboard()
        )
        return

    # Multiple channels - show selection
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for channel in channels:
        channel_title = channel['channel_title'] or channel['channel_url']
        analyzed_date = channel['analyzed_at'].strftime('%d.%m.%Y')

        keyboard.add(
            types.InlineKeyboardButton(
                f"üì∫ {channel_title} ({analyzed_date})",
                callback_data=f"select_channel_{channel['id']}"
            )
        )

    bot.send_message(
        message.chat.id,
        "‚úçÔ∏è <b>–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:",
        reply_markup=keyboard
    )


@bot.message_handler(func=lambda m: m.text in ["üì∞ News to Post", "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –≤ –ø–æ—Å—Ç"])
def news_to_post_button(message):
    """News to post button handler"""
    bot.send_message(
        message.chat.id,
        "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ –≤ –ø–æ—Å—Ç</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:",
        reply_markup=news_category_keyboard()
    )


@bot.message_handler(func=lambda m: m.text in ["üé® Create Image", "üé® –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"])
def create_image_button(message):
    """Create image button handler"""
    user_id = message.from_user.id

    state_manager.set_state(user_id, STATES["WAITING_IMAGE_PROMPT"])

    bot.send_message(
        message.chat.id,
        "üé® <b>–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <i>\"–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ —Å AI —Ç–µ–º–æ–π\"</i>\n"
        "‚Ä¢ <i>\"–ö–æ–Ω—Ü–µ–ø—Ç-–∞—Ä—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π\"</i>\n"
        "‚Ä¢ <i>\"–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –Ω–∞ –∑–∞–∫–∞—Ç–µ\"</i>",
        reply_markup=cancel_keyboard()
    )


@bot.message_handler(func=lambda m: m.text in ["‚úèÔ∏è Edit Image", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ"])
def edit_image_button(message):
    """Edit image button handler"""
    user_id = message.from_user.id

    state_manager.set_state(user_id, STATES["WAITING_IMAGE_FOR_EDIT"])

    bot.send_message(
        message.chat.id,
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–ø—Ä–æ—à—É, –∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏.",
        reply_markup=cancel_keyboard()
    )


@bot.message_handler(func=lambda m: m.text in ["üíß Watermark", "üíß –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫"])
def watermark_button(message):
    """Watermark button handler"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫", callback_data="wm_add"),
        types.InlineKeyboardButton("‚ûñ –£–±—Ä–∞—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫", callback_data="wm_remove")
    )

    bot.send_message(
        message.chat.id,
        "üíß <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=keyboard
    )


@bot.message_handler(func=lambda m: m.text in ["üìà My Stats", "üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
def stats_button(message):
    """Stats button handler"""
    user_id = message.from_user.id

    stats = db.get_user_stats(user_id)

    stats_text = f"""üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üìä –ö–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: <b>{stats['channels_analyzed']}</b>
‚úçÔ∏è –ü–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: <b>{stats['posts_generated']}</b>
üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: <b>{stats['images_created']}</b>

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç! üöÄ"""

    bot.send_message(message.chat.id, stats_text)


@bot.message_handler(func=lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
def help_button(message):
    """Help button handler"""
    help_handler(message)


@bot.message_handler(func=lambda m: m.text in ["‚ùå Cancel", "‚ùå –û—Ç–º–µ–Ω–∞"])
def cancel_button(message):
    """Cancel button handler"""
    user_id = message.from_user.id

    state_manager.clear_state(user_id)
    state_manager.clear_user_data(user_id)

    bot.send_message(
        message.chat.id,
        "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:",
        reply_markup=main_menu_keyboard()
    )


# ===== STATE HANDLERS =====

@bot.message_handler(func=lambda m: state_manager.get_state(m.from_user.id) == STATES["WAITING_CHANNEL"])
def handle_channel_input(message):
    """Handle channel URL input"""
    user_id = message.from_user.id
    channel_url = message.text.strip()

    if not channel_url.startswith('@'):
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>@–∏–º—è_–∫–∞–Ω–∞–ª–∞</code>"
        )
        return

    state_manager.clear_state(user_id)

    # Save channel URL for later use
    state_manager.set_data(user_id, "analyzing_channel_url", channel_url)

    # Send processing message
    processing_msg = bot.send_message(
        message.chat.id,
        "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–Ω–∞–ª...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã.\n"
        "–Ø –∑–∞–≥—Ä—É–∂–∞—é –ø–æ—Å—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∏–ª—å —Å –ø–æ–º–æ—â—å—é AI.",
        reply_markup=main_menu_keyboard()
    )

    # Start async task
    task = analyze_channel_task.delay(channel_url)
    state_manager.set_task_id(user_id, task.id)

    # Wait for result
    check_task_result(user_id, task.id, processing_msg.message_id, "analyze")


@bot.message_handler(func=lambda m: state_manager.get_state(m.from_user.id) == STATES["WAITING_TOPIC"])
def handle_topic_input(message):
    """Handle topic input for post generation"""
    user_id = message.from_user.id
    topic = message.text.strip()

    state_manager.clear_state(user_id)

    # Get the selected channel's style instead of latest
    channel_id = state_manager.get_data(user_id, "selected_channel_id")
    if not channel_id:
        bot.send_message(message.chat.id, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    channel = db.get_channel_by_id(channel_id)
    if not channel or channel['user_id'] != user_id:
        bot.send_message(message.chat.id, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    style = channel['style_summary']

    processing_msg = bot.send_message(
        message.chat.id,
        "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç—ã...\n\n"
        "–°–æ–∑–¥–∞—é 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å—Ç–∏–ª–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.",
        reply_markup=main_menu_keyboard()
    )

    # Start async task
    task = generate_posts_task.delay(style, topic)
    state_manager.set_task_id(user_id, task.id)

    check_task_result(user_id, task.id, processing_msg.message_id, "generate_posts")


@bot.message_handler(func=lambda m: state_manager.get_state(m.from_user.id) == STATES["WAITING_IMAGE_PROMPT"])
def handle_image_prompt(message):
    """Handle image generation prompt"""
    user_id = message.from_user.id
    prompt = message.text.strip()

    state_manager.set_data(user_id, "image_prompt", prompt)

    bot.send_message(
        message.chat.id,
        "üé® Choose AI model:",
        reply_markup=image_provider_keyboard()
    )


@bot.message_handler(content_types=['photo'], func=lambda m: state_manager.get_state(m.from_user.id) == STATES["WAITING_IMAGE_FOR_EDIT"])
def handle_image_for_edit(message):
    """Handle image upload for editing"""
    user_id = message.from_user.id

    # Get largest photo
    photo = message.photo[-1]
    file_info = bot.get_file(photo.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # Convert to base64
    img_b64 = base64.b64encode(downloaded_file).decode('utf-8')

    # Save image
    state_manager.set_data(user_id, "current_image", img_b64)
    state_manager.set_state(user_id, STATES["WAITING_EDIT_INSTRUCTION"])

    bot.send_message(
        message.chat.id,
        "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <i>\"–î–æ–±–∞–≤—å –∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç '–°–ö–ò–î–ö–ê' –≤–≤–µ—Ä—Ö—É\"</i>\n"
        "‚Ä¢ <i>\"–°–¥–µ–ª–∞–π —Ñ–æ–Ω —Å–∏–Ω–∏–º\"</i>\n"
        "‚Ä¢ <i>\"–î–æ–±–∞–≤—å –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —É–≥–ª—É\"</i>\n"
        "‚Ä¢ <i>\"–°–¥–µ–ª–∞–π —è—Ä—á–µ\"</i>",
        reply_markup=cancel_keyboard()
    )


@bot.message_handler(func=lambda m: state_manager.get_state(m.from_user.id) == STATES["WAITING_EDIT_INSTRUCTION"])
def handle_edit_instruction(message):
    """Handle edit instruction"""
    user_id = message.from_user.id
    instruction = message.text.strip()

    state_manager.clear_state(user_id)

    img_b64 = state_manager.get_data(user_id, "current_image")

    if not img_b64:
        bot.send_message(message.chat.id, "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    processing_msg = bot.send_message(
        message.chat.id,
        "‚è≥ –†–µ–¥–∞–∫—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å AI...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã.",
        reply_markup=main_menu_keyboard()
    )

    task = edit_image_task.delay(img_b64, instruction)
    state_manager.set_task_id(user_id, task.id)

    check_task_result(user_id, task.id, processing_msg.message_id, "edit_image")


@bot.message_handler(content_types=['photo'], func=lambda m: state_manager.get_state(m.from_user.id) == STATES["WAITING_IMAGE_FOR_WM"])
def handle_image_for_watermark(message):
    """Handle image for watermark"""
    user_id = message.from_user.id

    photo = message.photo[-1]
    file_info = bot.get_file(photo.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    img_b64 = base64.b64encode(downloaded_file).decode('utf-8')

    state_manager.set_data(user_id, "current_image", img_b64)
    state_manager.set_state(user_id, STATES["WAITING_WATERMARK_TEXT"])

    bot.send_message(
        message.chat.id,
        "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:",
        reply_markup=cancel_keyboard()
    )


@bot.message_handler(func=lambda m: state_manager.get_state(m.from_user.id) == STATES["WAITING_WATERMARK_TEXT"])
def handle_watermark_text(message):
    """Handle watermark text"""
    user_id = message.from_user.id
    text = message.text.strip()

    state_manager.clear_state(user_id)

    img_b64 = state_manager.get_data(user_id, "current_image")

    processing_msg = bot.send_message(
        message.chat.id,
        "‚è≥ –î–æ–±–∞–≤–ª—è—é –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫...",
        reply_markup=main_menu_keyboard()
    )

    task = add_watermark_task.delay(img_b64, text)
    state_manager.set_task_id(user_id, task.id)

    check_task_result(user_id, task.id, processing_msg.message_id, "add_watermark")


@bot.message_handler(func=lambda m: state_manager.get_state(m.from_user.id) == STATES["WAITING_NEWS_KEYWORDS"])
def handle_news_keywords(message):
    """Handle custom news search keywords"""
    user_id = message.from_user.id
    keywords_text = message.text.strip()

    state_manager.clear_state(user_id)

    keywords = [kw.strip() for kw in keywords_text.split(',')]

    processing_msg = bot.send_message(
        message.chat.id,
        f"üîç Searching news: {', '.join(keywords)}...",
        reply_markup=main_menu_keyboard()
    )

    task = fetch_news_task.delay(keywords=keywords)
    state_manager.set_task_id(user_id, task.id)

    check_task_result(user_id, task.id, processing_msg.message_id, "fetch_news")


# ===== CALLBACK HANDLERS =====

@bot.callback_query_handler(func=lambda c: c.data.startswith('select_channel_'))
def select_channel_callback(call):
    """Select channel for post generation"""
    user_id = call.from_user.id
    channel_id = int(call.data.split('_')[-1])

    bot.answer_callback_query(call.id)

    # Get channel info
    channel = db.get_channel_by_id(channel_id)

    if not channel or channel['user_id'] != user_id:
        bot.send_message(call.message.chat.id, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    channel_title = channel['channel_title'] or channel['channel_url']

    # Save selected channel
    state_manager.set_data(user_id, "selected_channel_id", channel_id)
    state_manager.set_state(user_id, STATES["WAITING_TOPIC"])

    bot.send_message(
        call.message.chat.id,
        f"‚úçÔ∏è <b>–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</b>\n\n"
        f"üì∫ –ö–∞–Ω–∞–ª: <b>{channel_title}</b>\n\n"
        f"–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å?\n\n"
        f"–ü—Ä–∏–º–µ—Ä: <i>\"–ù–æ–≤—ã–µ AI —Ç—Ä–µ–Ω–¥—ã –≤ 2025\"</i>",
        reply_markup=cancel_keyboard()
    )


@bot.callback_query_handler(func=lambda c: c.data.startswith('news_'))
def news_callback(call):
    """News category callbacks"""
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)

    if call.data == "news_custom":
        state_manager.set_state(user_id, STATES["WAITING_NEWS_KEYWORDS"])

        bot.send_message(
            call.message.chat.id,
            "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>Python, AI, Machine Learning</code>",
            reply_markup=cancel_keyboard()
        )
        return

    category = call.data.replace('news_', '')

    processing_msg = bot.send_message(
        call.message.chat.id,
        f"üì∞ Fetching {category.upper()} news...",
        reply_markup=main_menu_keyboard()
    )

    task = fetch_news_task.delay(category=category)
    state_manager.set_task_id(user_id, task.id)

    check_task_result(user_id, task.id, processing_msg.message_id, "fetch_news")


@bot.callback_query_handler(func=lambda c: c.data.startswith('select_news_'))
def select_news_callback(call):
    """Select news for post generation"""
    user_id = call.from_user.id
    news_index = int(call.data.split('_')[-1])

    bot.answer_callback_query(call.id)

    news_list = state_manager.get_data(user_id, "news_list")

    if not news_list:
        bot.send_message(call.message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if news_index >= len(news_list):
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–∏.")
        return

    news_item = news_list[news_index]

    # Save selected news
    state_manager.set_data(user_id, "selected_news", news_item)

    # Get user's channels
    channels = db.get_user_channels(user_id)

    if not channels:
        bot.send_message(
            call.message.chat.id,
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return

    # If only one channel - use it directly
    if len(channels) == 1:
        channel_id = channels[0]['id']
        channel = db.get_channel_by_id(channel_id)
        style = channel['style_summary']

        processing_msg = bot.send_message(
            call.message.chat.id,
            f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç—ã –∏–∑:\n<b>{news_item['title']}</b>",
            reply_markup=main_menu_keyboard()
        )

        task = generate_post_from_news_task.delay(style, news_item)
        state_manager.set_task_id(user_id, task.id)

        check_task_result(user_id, task.id, processing_msg.message_id, "generate_posts")
        return

    # Multiple channels - show selection
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for channel in channels:
        channel_title = channel['channel_title'] or channel['channel_url']
        analyzed_date = channel['analyzed_at'].strftime('%d.%m.%Y')

        keyboard.add(
            types.InlineKeyboardButton(
                f"üì∫ {channel_title} ({analyzed_date})",
                callback_data=f"select_news_channel_{channel['id']}"
            )
        )

    bot.send_message(
        call.message.chat.id,
        f"üì∞ <b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å:</b>\n{news_item['title']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:",
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda c: c.data.startswith('select_news_channel_'))
def select_news_channel_callback(call):
    """Select channel for news post generation"""
    user_id = call.from_user.id
    channel_id = int(call.data.split('_')[-1])

    bot.answer_callback_query(call.id)

    # Get channel info
    channel = db.get_channel_by_id(channel_id)

    if not channel or channel['user_id'] != user_id:
        bot.send_message(call.message.chat.id, "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # Get selected news
    news_item = state_manager.get_data(user_id, "selected_news")

    if not news_item:
        bot.send_message(call.message.chat.id, "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    style = channel['style_summary']

    processing_msg = bot.send_message(
        call.message.chat.id,
        f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç—ã –∏–∑:\n<b>{news_item['title']}</b>",
        reply_markup=main_menu_keyboard()
    )

    task = generate_post_from_news_task.delay(style, news_item)
    state_manager.set_task_id(user_id, task.id)

    check_task_result(user_id, task.id, processing_msg.message_id, "generate_posts")


@bot.callback_query_handler(func=lambda c: c.data.startswith('img_'))
def image_provider_callback(call):
    """Image provider selection"""
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)

    provider = "dalle" if call.data == "img_dalle" else "stability"
    prompt = state_manager.get_data(user_id, "image_prompt")

    if not prompt:
        bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    processing_msg = bot.send_message(
        call.message.chat.id,
        f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å {provider.upper()}...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã.",
        reply_markup=main_menu_keyboard()
    )

    task = generate_image_task.delay(prompt, provider)
    state_manager.set_task_id(user_id, task.id)

    check_task_result(user_id, task.id, processing_msg.message_id, "generate_image")


@bot.callback_query_handler(func=lambda c: c.data.startswith('wm_'))
def watermark_callback(call):
    """Watermark action callbacks"""
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)

    if call.data == "wm_add":
        state_manager.set_state(user_id, STATES["WAITING_IMAGE_FOR_WM"])
        bot.send_message(
            call.message.chat.id,
            "üíß <b>–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:",
            reply_markup=cancel_keyboard()
        )

    elif call.data == "wm_remove":
        state_manager.set_state(user_id, STATES["WAITING_IMAGE_FOR_EDIT"])
        bot.send_message(
            call.message.chat.id,
            "üíß <b>–£–¥–∞–ª–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º:",
            reply_markup=cancel_keyboard()
        )


@bot.callback_query_handler(func=lambda c: c.data.startswith('select_post_'))
def select_post_callback(call):
    """Select post variant"""
    user_id = call.from_user.id
    post_index = int(call.data.split('_')[-1])

    bot.answer_callback_query(call.id, "‚úÖ –ü–æ—Å—Ç –≤—ã–±—Ä–∞–Ω!")

    posts = state_manager.get_data(user_id, "generated_posts")

    if posts and post_index < len(posts):
        selected = posts[post_index]

        # Save to DB
        db.save_post(user_id, selected)

        bot.send_message(
            call.message.chat.id,
            "‚úÖ <b>–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç:</b>\n\n" + selected + "\n\n<i>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é!</i>"
        )


# ===== TASK RESULT CHECKER =====

def check_task_result(user_id: int, task_id: str, msg_id: int, task_type: str):
    """Check Celery task result and handle response"""

    def check_and_update():
        task_result = celery_app.AsyncResult(task_id)

        max_attempts = 60  # 60 seconds
        attempt = 0

        while attempt < max_attempts:
            if task_result.ready():
                result = task_result.get()

                if result.get("error"):
                    bot.send_message(
                        user_id,
                        f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
                    )
                    return

                # Handle different task types
                if task_type == "analyze":
                    handle_analyze_result(user_id, result)

                elif task_type == "generate_posts":
                    handle_posts_result(user_id, result)

                elif task_type == "fetch_news":
                    handle_news_result(user_id, result)

                elif task_type == "generate_image":
                    handle_image_result(user_id, result)

                elif task_type == "edit_image":
                    handle_edited_image_result(user_id, result)

                elif task_type == "add_watermark":
                    handle_watermarked_image_result(user_id, result)

                return

            time.sleep(1)
            attempt += 1

        bot.send_message(user_id, "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # Run in thread to not block bot
    import threading
    threading.Thread(target=check_and_update).start()


def handle_analyze_result(user_id: int, result: dict):
    """Handle channel analysis result"""
    style = result.get("style")
    channel_title = result.get("channel_title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")

    if not style:
        bot.send_message(user_id, "‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
        return

    # Get channel URL from state
    channel_url = state_manager.get_data(user_id, "analyzing_channel_url") or "unknown"

    # Save to DB with channel title
    db.save_channel_style(user_id, channel_url, channel_title, style)

    # Clean up temp data
    state_manager.delete_data(user_id, "analyzing_channel_url")

    # Format response with deep analysis info
    response = f"""‚úÖ <b>–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_title}

üìä <b>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤:</b> {style.get('analyzed_posts_count', 0)}

üìà <b>–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>
‚Ä¢ –¢–æ–Ω: {style.get('tone', 'N/A')}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤: {style.get('average_word_count', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {style.get('average_sentence_count', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —ç–º–æ–¥–∑–∏: {style.get('average_emoji_count', 0)}

üéØ <b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b> {style.get('target_audience', '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...')[:100]}...

–ö–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ!
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ ‚úçÔ∏è"""

    bot.send_message(user_id, response)


def handle_posts_result(user_id: int, result: dict):
    """Handle generated posts result"""
    posts = result.get("posts", [])

    if not posts:
        bot.send_message(user_id, "‚ùå –ü–æ—Å—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        return

    # Save posts
    state_manager.set_data(user_id, "generated_posts", posts)

    # Send variants
    keyboard = types.InlineKeyboardMarkup(row_width=1)

    for i, post in enumerate(posts):
        bot.send_message(user_id, f"<b>–í–∞—Ä–∏–∞–Ω—Ç {i+1}:</b>\n\n{post}")

        keyboard.add(
            types.InlineKeyboardButton(
                f"‚úÖ –í—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç {i+1}",
                callback_data=f"select_post_{i}"
            )
        )

    bot.send_message(
        user_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=keyboard
    )


def handle_news_result(user_id: int, result: dict):
    """Handle news fetch result"""
    news_list = result.get("news", [])

    if not news_list:
        bot.send_message(user_id, "‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # Save news
    state_manager.set_data(user_id, "news_list", news_list)

    # Send news
    response = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n"

    keyboard = types.InlineKeyboardMarkup(row_width=1)

    for i, news in enumerate(news_list[:5]):
        response += f"{i+1}. <b>{news['title']}</b>\n"
        response += f"   {news['source']} ‚Ä¢ <a href='{news['url']}'>–°—Å—ã–ª–∫–∞</a>\n\n"

        keyboard.add(
            types.InlineKeyboardButton(
                f"üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –∏–∑ #{i+1}",
                callback_data=f"select_news_{i}"
            )
        )

    bot.send_message(user_id, response, reply_markup=keyboard, disable_web_page_preview=True)


def handle_image_result(user_id: int, result: dict):
    """Handle generated image result"""
    img_b64 = result.get("image")

    if not img_b64:
        bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return

    # Decode image
    img_bytes = base64.b64decode(img_b64)

    # Send image
    bot.send_photo(user_id, photo=img_bytes, caption="‚úÖ –í–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")

    # Save image data
    state_manager.set_data(user_id, "current_image", img_b64)


def handle_edited_image_result(user_id: int, result: dict):
    """Handle edited image result"""
    img_b64 = result.get("image")

    if not img_b64:
        bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return

    img_bytes = base64.b64decode(img_b64)

    bot.send_photo(user_id, photo=img_bytes, caption="‚úÖ –í–∞—à–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")

    state_manager.set_data(user_id, "current_image", img_b64)


def handle_watermarked_image_result(user_id: int, result: dict):
    """Handle watermarked image result"""
    img_b64 = result.get("image")

    if not img_b64:
        bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫")
        return

    img_bytes = base64.b64decode(img_b64)

    bot.send_photo(user_id, photo=img_bytes, caption="‚úÖ –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω!")


# ===== MAIN =====

if __name__ == '__main__':
    print("ü§ñ SMM Bot started!")
    print("Press Ctrl+C to stop")

    try:
        bot.infinity_polling(timeout=30, long_polling_timeout=30)
    except KeyboardInterrupt:
        print("\nüëã Bot stopped")

